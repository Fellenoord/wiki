(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[458],{5472:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/workflow/git-conventions",function(){return t(8649)}])},9369:function(e,n,t){"use strict";var i=t(5893);n.Z={logo:(0,i.jsx)("span",{style:{fontWeight:800},children:"WebCieWiki"}),project:{link:"https://github.com/fellenoord"},darkMode:!0,footer:{text:(0,i.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," WebCie Fellenoord"]})},docsRepositoryBase:"https://github.com/Fellenoord/wiki",faviconGlyph:"\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDCBB",head:(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,i.jsx)("meta",{property:"og:title",content:"WebCieWiki"}),(0,i.jsx)("meta",{property:"og:description",content:"The WebCieWiki."})]}),banner:{key:"join-webcie",text:(0,i.jsx)("a",{href:"https://fellenoord.nl",target:"_blank",children:"\uD83D\uDE09 Don't like the website? Join the WebCie →"})},useNextSeoProps:()=>({titleTemplate:"%s"})}},8649:function(e,n,t){"use strict";t.r(n);var i=t(5893),s=t(4319),o=t(3762),a=t(9369);t(9966);var r=t(1151);function l(e){let n=Object.assign({h2:"h2",code:"code",p:"p",pre:"pre",span:"span",em:"em",a:"a"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"the-main-branch",children:["The ",(0,i.jsx)(n.code,{children:"main"})," branch"]}),"\n",(0,i.jsxs)(n.p,{children:["The main branch consists of all the code that has been squashed and merged through a pull request. The idea is that all code on ",(0,i.jsx)(n.code,{children:"main"})," works. It is not possible to directly push code to this branch."]}),"\n",(0,i.jsx)(n.h2,{id:"branch-naming",children:"Branch naming"}),"\n",(0,i.jsx)(n.p,{children:"We follow this branch naming structure:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"<issue_id>-<description>"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"# or"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"feat/<description>"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"# or"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"fix/<description>"})})]})}),"\n",(0,i.jsx)(n.p,{children:"In Git, we can use the shorthand to checkout and create a branch:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"bash","data-theme":"default",children:(0,i.jsx)(n.code,{"data-language":"bash","data-theme":"default",children:(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"git "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string)"},children:"checkout"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string)"},children:"-b"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"<"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string)"},children:"branc"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"h"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:">"})]})})}),"\n",(0,i.jsx)(n.h2,{id:"committing-code-to-the-repository",children:"Committing code to the repository"}),"\n",(0,i.jsxs)(n.p,{children:["All commits ",(0,i.jsx)(n.em,{children:"must"})," follow the ",(0,i.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/#specification",children:"Conventional Commits specification"}),". The commit message should be structured as follows:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"<type>[optional scope]: <description>"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"[optional body]"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"[optional footer(s)]"})})]})}),"\n",(0,i.jsxs)(n.p,{children:["Here, the types can be as follows: ",(0,i.jsx)(n.code,{children:"fix"}),", ",(0,i.jsx)(n.code,{children:"feat"}),", ",(0,i.jsx)(n.code,{children:"build"}),", ",(0,i.jsx)(n.code,{children:"chore"}),", ",(0,i.jsx)(n.code,{children:"ci"}),", ",(0,i.jsx)(n.code,{children:"docs"}),", ",(0,i.jsx)(n.code,{children:"style"}),", ",(0,i.jsx)(n.code,{children:"refactor"}),", ",(0,i.jsx)(n.code,{children:"perf"})," or ",(0,i.jsx)(n.code,{children:"test"}),". Furthermore, make sure that the commit message length does not exceed 50 characters. An example commit would look something like this:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"feat(activity): allow user to register"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"​"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"This adds the logic for activity registration and stores the ActivityRegistration to the database."})})]})})]})}t(5675);let d={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)},pageOpts:{filePath:"pages/workflow/git-conventions.mdx",route:"/workflow/git-conventions",headings:[{depth:2,value:"The main branch",id:"the-main-branch"},{depth:2,value:"Branch naming",id:"branch-naming"},{depth:2,value:"Committing code to the repository",id:"committing-code-to-the-repository"}],pageMap:[{kind:"Meta",data:{index:"Getting Started",setup:"Setup",learning:"Learning",workflow:"Workflow"}},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"learning",route:"/learning",children:[{kind:"Meta",data:{index:"Where to start",programming:"Programming skills",backend:"Backend skills",frontend:"Frontend skills",git:"Git"}},{kind:"MdxPage",name:"backend",route:"/learning/backend"},{kind:"MdxPage",name:"frontend",route:"/learning/frontend"},{kind:"MdxPage",name:"git",route:"/learning/git"},{kind:"MdxPage",name:"index",route:"/learning"},{kind:"MdxPage",name:"programming",route:"/learning/programming"}]},{kind:"Folder",name:"setup",route:"/setup",children:[{kind:"Meta",data:{index:"Introduction",wsl:"Windows Subsystem for Linux (WSL)",macos:"MacOS",nodejs:"Node.js",yarn:"Yarn",git:"Version control using Git",docker:"Docker",ide:"Development environment",terminal:"Customizing the terminal",others:"Additional programs"}},{kind:"MdxPage",name:"docker",route:"/setup/docker"},{kind:"MdxPage",name:"git",route:"/setup/git"},{kind:"MdxPage",name:"ide",route:"/setup/ide"},{kind:"MdxPage",name:"index",route:"/setup"},{kind:"MdxPage",name:"macos",route:"/setup/macos"},{kind:"MdxPage",name:"nodejs",route:"/setup/nodejs"},{kind:"MdxPage",name:"others",route:"/setup/others"},{kind:"MdxPage",name:"terminal",route:"/setup/terminal"},{kind:"MdxPage",name:"wsl",route:"/setup/wsl"},{kind:"MdxPage",name:"yarn",route:"/setup/yarn"}]},{kind:"Folder",name:"workflow",route:"/workflow",children:[{kind:"Meta",data:{index:"Step-by-step","git-conventions":"Git conventions"}},{kind:"MdxPage",name:"git-conventions",route:"/workflow/git-conventions"},{kind:"MdxPage",name:"index",route:"/workflow"}]}],flexsearch:{codeblocks:!0},title:"Git Conventions"},pageNextRoute:"/workflow/git-conventions",nextraLayout:o.ZP,themeConfig:a.Z};n.default=(0,s.j)(d)}},function(e){e.O(0,[774,242,888,179],function(){return e(e.s=5472)}),_N_E=e.O()}]);