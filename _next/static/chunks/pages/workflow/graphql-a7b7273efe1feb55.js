(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[399],{1440:function(e,o,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/workflow/graphql",function(){return n(5339)}])},9369:function(e,o,n){"use strict";var r=n(5893);o.Z={logo:(0,r.jsx)("span",{style:{fontWeight:800},children:"WebCieWiki"}),project:{link:"https://github.com/fellenoord"},darkMode:!0,footer:{text:(0,r.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," WebCie Fellenoord"]})},docsRepositoryBase:"https://github.com/Fellenoord/wiki",faviconGlyph:"\uD83D\uDC68\uD83C\uDFFD‍\uD83D\uDCBB",head:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,r.jsx)("meta",{property:"og:title",content:"WebCieWiki"}),(0,r.jsx)("meta",{property:"og:description",content:"The WebCieWiki."})]}),banner:{key:"join-webcie",text:(0,r.jsx)("a",{href:"https://fellenoord.nl",target:"_blank",children:"\uD83D\uDE09 Don't like the website? Join the WebCie →"})},useNextSeoProps:()=>({titleTemplate:"%s"})}},5339:function(e,o,n){"use strict";n.r(o);var r=n(5893),i=n(4319),t=n(3762),s=n(9369);n(9966);var a=n(1151);function d(e){let o=Object.assign({p:"p",a:"a",h2:"h2",code:"code",pre:"pre",span:"span",blockquote:"blockquote"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["While you might be familiar with REST APIs, you might not be familiar with GraphQL. GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. If you are not yet familiar with the basics of GraphQL, please refer to the ",(0,r.jsx)(o.a,{href:"/learning/backend#have-used-nodejs-before",children:"backend skills page"}),"."]}),"\n",(0,r.jsx)(o.p,{children:"We'll go over the general structure of GraphQL, how we apply it in our API and how to write GraphQL resolvers using our conventions."}),"\n",(0,r.jsx)(o.h2,{id:"graphql-structure",children:"GraphQL structure"}),"\n",(0,r.jsxs)(o.p,{children:["GraphQL APIs are structured as a graph of nodes and edges. The nodes are the data types and the edges are the relationships between them. The edges are defined by the fields of the nodes. For example, a ",(0,r.jsx)(o.code,{children:"User"})," node might have a ",(0,r.jsx)(o.code,{children:"posts"})," field that is a list of ",(0,r.jsx)(o.code,{children:"Post"})," nodes. The ",(0,r.jsx)(o.code,{children:"Post"})," node might have a ",(0,r.jsx)(o.code,{children:"comments"})," field that is a list of ",(0,r.jsx)(o.code,{children:"Comment"})," nodes. The ",(0,r.jsx)(o.code,{children:"Comment"})," node might have a ",(0,r.jsx)(o.code,{children:"user"})," field that is a ",(0,r.jsx)(o.code,{children:"User"})," node."]}),"\n",(0,r.jsxs)(o.p,{children:["In the case of our project, we have a ",(0,r.jsx)(o.code,{children:"TrainingPeriod"})," node that has a ",(0,r.jsx)(o.code,{children:"groups"})," field that is a (paginated) list of ",(0,r.jsx)(o.code,{children:"TrainingGroup"})," nodes, which have a ",(0,r.jsx)(o.code,{children:"trainings"})," field that is a (paginated) list of ",(0,r.jsx)(o.code,{children:"Training"})," nodes. Each ",(0,r.jsx)(o.code,{children:"Training"})," also contains a ",(0,r.jsx)(o.code,{children:"date"})," field that is a ",(0,r.jsx)(o.code,{children:"Date"})," node."]}),"\n",(0,r.jsxs)(o.p,{children:["Each of these things can also be found in our codebase. The ",(0,r.jsx)(o.code,{children:"TrainingPeriod"})," node is defined in our dto file: ",(0,r.jsx)(o.code,{children:"src/training/period/dto/training-period.object.ts"}),". Notice the ",(0,r.jsx)(o.code,{children:"@ObjectType"})," notation which defines a GraphQL object in NestJS. In the training period dto, you can see only 2 fields: ",(0,r.jsx)(o.code,{children:"id"})," and ",(0,r.jsx)(o.code,{children:"isPublished"}),". However, earlier we mentioned that the ",(0,r.jsx)(o.code,{children:"TrainingPeriod"})," node has a ",(0,r.jsx)(o.code,{children:"groups"})," field that is a list of (paginated) ",(0,r.jsx)(o.code,{children:"TrainingGroup"})," nodes. To find these groups, we have to go to the ",(0,r.jsx)(o.code,{children:"TrainingGroupPeriodResolver"})," found in ",(0,r.jsx)(o.code,{children:"src/training/group/training-group.period.resolver.ts"}),". In here, we'll find a ",(0,r.jsx)(o.code,{children:"@ResolveField"})," that returns a ",(0,r.jsx)(o.code,{children:"PaginatedTrainingGroupsObject"}),". This function allows a user to query a ",(0,r.jsx)(o.code,{children:"TrainingPeriod"})," in our API and resolve a field called ",(0,r.jsx)(o.code,{children:"groups"})," that resolves as a paginated list of ",(0,r.jsx)(o.code,{children:"TrainingGroup"})," nodes. If the top-level for query is called ",(0,r.jsx)(o.code,{children:"period"})," (which can be found in our ",(0,r.jsx)(o.code,{children:"TrainingPeriodResolver"})," in ",(0,r.jsx)(o.code,{children:"src/training/period/training-period.resolver.ts"}),"), our groups query would look like this:"]}),"\n",(0,r.jsx)(o.pre,{"data-language":"graphql","data-theme":"default",children:(0,r.jsxs)(o.code,{"data-language":"graphql","data-theme":"default",children:[(0,r.jsxs)(o.span,{className:"line",children:[(0,r.jsx)(o.span,{style:{color:"var(--shiki-token-keyword)"},children:"query"}),(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(o.span,{style:{color:"var(--shiki-token-function)"},children:"GetPeriodGroups"}),(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"($periodId: "}),(0,r.jsx)(o.span,{style:{color:"var(--shiki-token-constant)"},children:"String"}),(0,r.jsx)(o.span,{style:{color:"var(--shiki-token-keyword)"},children:"!"}),(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:") {"})]}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"  period(id: $periodId) {"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"    groups {"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"      edges {"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"        node {"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"          id"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"        }"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"      }"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"    }"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"  }"})}),"\n",(0,r.jsx)(o.span,{className:"line",children:(0,r.jsx)(o.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:["If you are curious as to why we are cannot directly query a ",(0,r.jsx)(o.code,{children:"TrainingGroup"})," node from ",(0,r.jsx)(o.code,{children:"groups"}),", you can read more about the pagination specification ",(0,r.jsx)(o.a,{href:"https://relay.dev/graphql/connections.htm",children:"here"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:["If you have read up on GraphQL, you should be familiar with this query notation. We are creating a query called ",(0,r.jsx)(o.code,{children:"GetPeriodGroups"})," that takes 1 argument, ",(0,r.jsx)(o.code,{children:"periodId"})," which is of type ",(0,r.jsx)(o.code,{children:"String"})," (the ",(0,r.jsx)(o.code,{children:"!"})," means that it is required). The query will return a ",(0,r.jsx)(o.code,{children:"period"})," node that has a ",(0,r.jsx)(o.code,{children:"groups"})," field that is a paginated list of ",(0,r.jsx)(o.code,{children:"TrainingGroup"})," nodes. Each ",(0,r.jsx)(o.code,{children:"TrainingGroup"})," node has an ",(0,r.jsx)(o.code,{children:"id"})," field."]}),"\n",(0,r.jsxs)(o.p,{children:["In general, we want to nest objects to reflect our relationships in the database. So instead of having a query for ",(0,r.jsx)(o.code,{children:"group"}),", you can only query a group through a period. This is because a group is only related to a period and not to any other object. If you want to query a group, you must first query a period and then query the group through the period. Mutations, on the other hand, are not nested. This is because mutations are used to create, update or delete objects. If you want to create a group, you can do so without having to query a period first."]}),"\n",(0,r.jsx)(o.h2,{id:"how-to-write-resolvers",children:"How to write resolvers"}),"\n",(0,r.jsxs)(o.p,{children:["In the previous example, we saw that we are resolving field on a ",(0,r.jsx)(o.code,{children:"TrainingPeriod"})," via the ",(0,r.jsx)(o.code,{children:"TrainingGroupPeriodResolver"}),". Notice that this is not the same resolver as our ",(0,r.jsx)(o.code,{children:"period"})," query, which is ",(0,r.jsx)(o.code,{children:"TrainingPeriodResolver"}),". While both resolvers are resolvers for the type ",(0,r.jsx)(o.code,{children:"TrainingPeriodObject"}),", we deliberatly chose to split them up. This is because we want to keep our resolvers small and focused on a single task. This makes it easier to maintain and test our code. This also helps with keeping down the number of circular dependencies in NestJS since you won't need to import the ",(0,r.jsx)(o.code,{children:"TrainingGroupService"})," within the ",(0,r.jsx)(o.code,{children:"TrainingPeriodModule"})," this way."]}),"\n",(0,r.jsx)(o.p,{children:"In general, if you are resolving fields for other objects, you should create a new resolver for that object within the module of that object."}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:["Our convention is to name the resolver ",(0,r.jsx)(o.code,{children:"CurrentObject.ObjectToResolveOn.resolver.ts"}),". In the case of our ",(0,r.jsx)(o.code,{children:"TrainingGroupPeriodResolver"}),", we are resolving the ",(0,r.jsx)(o.code,{children:"groups"})," field on a ",(0,r.jsx)(o.code,{children:"period"}),", so we named it ",(0,r.jsx)(o.code,{children:"training-group.period.resolver.ts"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:["For queries and mutations, on the other hand, you are free to use the same resolver as the object you are querying or mutating. In the case of our ",(0,r.jsx)(o.code,{children:"TrainingPeriodResolver"}),", we are querying a ",(0,r.jsx)(o.code,{children:"period"})," and so we named it ",(0,r.jsx)(o.code,{children:"training-period.resolver.ts"}),". This also makes the most sense since we can use our ",(0,r.jsx)(o.code,{children:"TrainingPeriodService"}),", which is in the same module as our resolver, to both query and mutate periods."]}),"\n",(0,r.jsxs)(o.blockquote,{children:["\n",(0,r.jsxs)(o.p,{children:["Our convention is to name the resolver ",(0,r.jsx)(o.code,{children:"CurrentObject.resolver.ts"}),". In the case of our ",(0,r.jsx)(o.code,{children:"TrainingPeriodResolver"}),", we are querying a ",(0,r.jsx)(o.code,{children:"period"}),", so we named it ",(0,r.jsx)(o.code,{children:"training-period.resolver.ts"}),"."]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"avoid-top-level-queries-for-nested-objects",children:"Avoid top-level queries for nested objects"}),"\n",(0,r.jsxs)(o.p,{children:["With our ",(0,r.jsx)(o.code,{children:"TrainingGroupPeriodResolver"}),", we are resolving the training groups on a ",(0,r.jsx)(o.code,{children:"TrainingPeriod"}),". However, this adds more complexity to our groups query since we now need to query a period first. While we could have added a top-level query for ",(0,r.jsx)(o.code,{children:"groups"}),", we decided against it. This is because we want to keep our API as simple as possible. We want to avoid having to query multiple objects to get the data you want. This is why we decided to nest the ",(0,r.jsx)(o.code,{children:"groups"})," field on the ",(0,r.jsx)(o.code,{children:"period"})," query. This way, you can query a period and get the groups through that period. This is also why we decided to nest the ",(0,r.jsx)(o.code,{children:"trainings"})," field on the ",(0,r.jsx)(o.code,{children:"group"})," query. This way, you can query a group and get the trainings through that group."]}),"\n",(0,r.jsxs)(o.p,{children:["You can, however, create some shortcuts. In our case, we have resolve a ",(0,r.jsx)(o.code,{children:"myTrainings"})," field directly on a ",(0,r.jsx)(o.code,{children:"TrainingPeriod"}),". This is both because we want to make it a little easier for the frontend to query the trainings for the current user and because we a user's training might span multiple groups. Another example of such a shortcut is the ",(0,r.jsx)(o.code,{children:"currentPeriod"})," query. This is a top-level query that returns the current period. This is because we want to make it easier for the frontend to query the current period."]}),"\n",(0,r.jsx)(o.p,{children:"Keep in mind that this advise does not hold for mutations, since you can't nest mutations. If you want to create a training, it has to be done through a top-level mutation. In the end, a top-level query should only be added if the object is standalone with no parent relationship. If the object is related to another object, you should nest the query (as a resolved field) on that object."})]})}n(5675);let l={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:o}=Object.assign({},(0,a.ah)(),e.components);return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)},pageOpts:{filePath:"pages/workflow/graphql.mdx",route:"/workflow/graphql",headings:[{depth:2,value:"GraphQL structure",id:"graphql-structure"},{depth:2,value:"How to write resolvers",id:"how-to-write-resolvers"},{depth:2,value:"Avoid top-level queries for nested objects",id:"avoid-top-level-queries-for-nested-objects"}],pageMap:[{kind:"Meta",data:{index:"Getting Started",setup:"Setup",learning:"Learning",workflow:"Workflow"}},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"learning",route:"/learning",children:[{kind:"Meta",data:{index:"Where to start",programming:"Programming skills",backend:"Backend skills",frontend:"Frontend skills",git:"Git skills"}},{kind:"MdxPage",name:"backend",route:"/learning/backend"},{kind:"MdxPage",name:"frontend",route:"/learning/frontend"},{kind:"MdxPage",name:"git",route:"/learning/git"},{kind:"MdxPage",name:"index",route:"/learning"},{kind:"MdxPage",name:"programming",route:"/learning/programming"}]},{kind:"Folder",name:"setup",route:"/setup",children:[{kind:"Meta",data:{index:"Introduction",wsl:"Windows Subsystem for Linux (WSL)",macos:"MacOS",nodejs:"Node.js",yarn:"Yarn",git:"Version control using Git",docker:"Docker",ide:"Development environment",terminal:"Customizing the terminal",others:"Additional programs"}},{kind:"MdxPage",name:"docker",route:"/setup/docker"},{kind:"MdxPage",name:"git",route:"/setup/git"},{kind:"MdxPage",name:"ide",route:"/setup/ide"},{kind:"MdxPage",name:"index",route:"/setup"},{kind:"MdxPage",name:"macos",route:"/setup/macos"},{kind:"MdxPage",name:"nodejs",route:"/setup/nodejs"},{kind:"MdxPage",name:"others",route:"/setup/others"},{kind:"MdxPage",name:"terminal",route:"/setup/terminal"},{kind:"MdxPage",name:"wsl",route:"/setup/wsl"},{kind:"MdxPage",name:"yarn",route:"/setup/yarn"}]},{kind:"Folder",name:"workflow",route:"/workflow",children:[{kind:"Meta",data:{index:"Step-by-step","git-conventions":"Git conventions",commands:"Useful commands",troubleshooting:"Troubleshooting",graphql:"GraphQL conventions"}},{kind:"MdxPage",name:"commands",route:"/workflow/commands"},{kind:"MdxPage",name:"git-conventions",route:"/workflow/git-conventions"},{kind:"MdxPage",name:"graphql",route:"/workflow/graphql"},{kind:"MdxPage",name:"index",route:"/workflow"},{kind:"MdxPage",name:"troubleshooting",route:"/workflow/troubleshooting"}]}],flexsearch:{codeblocks:!0},title:"GraphQL"},pageNextRoute:"/workflow/graphql",nextraLayout:t.ZP,themeConfig:s.Z};o.default=(0,i.j)(l)}},function(e){e.O(0,[774,242,888,179],function(){return e(e.s=1440)}),_N_E=e.O()}]);