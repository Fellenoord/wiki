{"/":{"title":"Index","data":{"":"Welcome to the WebCieWiki, this is a central place for all the information about the great WebCie rewrite of 2022-2023. This is a work in progress, so please be patient. If you have any questions, please contact the WebCie.At the moment, this wiki mostly contains tutorials about various aspects of the rewrite. Currently, you can find tutorials about:\nSetting up your development environment\nLearning how to program and language-specific skills\nLearning about our workflow"}},"/learning/backend":{"title":"Backend","data":{"":"Please only start here if you are familiar with both TypeScript and Node.js. If you are not, please refer to our programming skills section first.","have-never-done-any-backend-development-in-nodejs-before#Have never done any backend development in Node.js before":"While you might already be somewhat familiar with backend development if you've used things like Python Django/Flask, Java Spring, or Ruby on Rails, you might not have done any backend development in Node.js before. If that's the case, you should know that the simplest form of backend development in Node.js happens in the form of a HTTP server. This is a server that listens for HTTP requests and responds to them. The most common way to do this is with the Express framework. As such, we recommend to familiarize yourself with the basic concepts of an HTTP server and Express before continuing. Here are some resources:\nExpress documentation\nFull Stack course - Express\n\nNote that the course above uses MongoDB to store data, but we are using PostgreSQL. I recommend skipping the MongoDB part and just focusing on the Express part. You probably don't need to know a lot about databases to get started with this project, but we will handle this in a bit more detail in the next section.","have-used-nodejs-before#Have used Node.js before":"If you have used Node.js before for backend development, you have probably used either Express, or a similar framework. This section will mainly focus on becoming familiar with the structure of our backend and the main libraries we are using. Here are some resources about the libraries we are using:\nNestJS\nPrisma\nGraphQL\nFull Stack course - GraphQL\n\nFor NestJS, it is important to familiarize yourself with the basic structure of modules, services, controllers, and resolvers. For Prisma, it is important to familiarize yourself with the API and how to use it. For GraphQL, it is important to familiarize yourself with the basic concepts of GraphQL and how to write queries and mutations.","where-to-go-from-here#Where to go from here":"Now that you know the basics about the backend, you can either go to the frontend section if you are more interested in the website or you can go to the git section if you want to learn how to start contributing to the project."}},"/learning/frontend":{"title":"Frontend","data":{"":"Please only start here if you are familiar with both TypeScript and Node.js. If you are not, please refer to our programming skills section first.","have-never-used-react-before#Have never used React before":"Whether you have already made websites using vanilla JavaScript and HTML, used Vue before or have not made any website before, you can start here. Since our frontend is built with React, you will need to learn React before you can start contributing to the frontend. Here are some resources to get you started:\nReact Documentation\nFull Stack course\n\nWhile the React docs should be enough to familiarize yourself with React, the Full Stack course can be a great, but exhaustive resource to learn everything about React and web development in general. Not all parts of the course are relevant, and some parts cover some more basic concepts that you might already know (like HTTP requests), you can always skip those parts. Do note that the first parts are all in JavaScript, there is a part specifically about TypeScript (part 9) but in general, TypeScript does not differ much from JavaScript when it comes to React. Also keep in mind the prerequisites for the course, you will need to know some basic programming and Git.","have-used-react-before#Have used React before":"If you have already used React (preferably with TypeScript) before, you don't need to learn a whole lot extra. We are using Next.js as our framework of choice, which is a React framework that adds some extra features like server-side rendering and routing. To learn more about Next.js, we recommend the official documentation as well as their tutorial. The tutorial is a great way to get started with Next.js, but you can also just read the documentation if you prefer that. Keep in mind the tutorial does not use TypeScript, but the difference between TypeScript and JavaScript is not that big when it comes to React.","have-used-nextjs-before#Have used Next.js before":"If you have already used Next.js before and feel comfortable with it (including using it with TypeScript), you should be good to go. If you have used Next.js before but it was a while ago, make sure to read the documentation again to make sure you are familiar with the latest version of Next.js (we are using Next 13 at the time of writing).","where-to-go-from-here#Where to go from here":"Once you have familiarized yourself with Next.js, you might want to read up on some major frontend libraries we are using in the project. These are:\nChakra UI - our UI library\nApollo Client - our GraphQL client\nReact Hook Form - our form library\n\nOtherwise, you can start looking at the git section to learn how to contribute to the project."}},"/learning/git":{"title":"Git","data":{"":"Now that you are familiar with at least the basics of our project, you should also know how you can start contributing to our project. For this, we use a versioning control system called Git. Git is like Google Drive for code. It allows you to keep track of changes to your code and allows you to collaborate with other developers. Even though you might already be familiar with Git, we recommend you at least read the last section to get a better understanding of how we use Git.","have-never-used-any-versioning-control-system-before#Have never used any versioning control system before":"There's a lot that can be learned about versioning control systems in general, but to understand the basics, you should at least know the following:\nLearn Git Branching\nGit Book\nSet up Git","have-used-git-before#Have used Git before":"Even though you might already be familiar with Git, there are still some particularities that you should know about our project. First of all, we use GitHub as our hosting platform of choice, meaning you should create a GitHub account (if you have not already) and request access to our repositories. You should also become familiar with our workflow, which can be found in our workflow section."}},"/learning":{"title":"Index","data":{"":"Depending on your level of competence, you might already be familiar with some programming concepts or languages. For each area, we will make some distinctions in your skill level to make sure you know enough to get started.\nMake sure to have reached the last level of programming skills before continuing with frontend, and backend skills.","skills#Skills":"Programming skills\nFrontend skills\nBackend skills\nGit skills","programming-skills#Programming skills":"Never programmed before in my life\nHave done some programming, whether it be in JavaScript, TypeScript or another language\nHave used TypeScript in combination with Node.js before","backend-skills#Backend skills":"Have never done any backend development with Node.js before\nHave used Node.js before","frontend-skills#Frontend skills":"Have never used React before\nHave used React before, but not Next.js\nHave used Next.js before","git-skills#Git skills":"Have never used any versioning control system before\nHave used Git / GitHub before"}},"/setup/git":{"title":"Git","data":{"":"Git should already be installed on your Linux distribution. You can check by using git --version in the command line. However if it's not installed do so using:\nsudo apt-get install git\n\n\nGit should already be installed on your MacOS version. You can check by using git --version in the command line. However if it's not installed do so using:\nbrew install git"}},"/setup":{"title":"Index","data":{"":"This entire wiki assumes the use of an unix-based system. If you are using MacOS this requires no further setup, however, for Windows the Windows Subsystem for Linux (WSL) is encouraged.A guide to setup WSL can be found here. For MacOS look here."}},"/setup/macos":{"title":"macOS","data":{"":"","command-line-tools#Command Line tools":"As a MacOS developer you need have the Xcode Command Line Tools installed.\nxcode-select --install","homebrew#Homebrew":"When using MacOS it is recommended to use the Homebrew package manager. It installs stuff using the command line. To install homebrew simply run the following:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""}},"/setup/nodejs":{"title":"Nodejs","data":{"":"When using Node.js it recommended to use the Node Version Manager (NVM) to quickly install and use different versions of node via the command line. Run and download the script using cURL:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\nThen, after reopening the terminal, use nvm --version to check if it has installed properly. Finally, we can install the latest version of Node using nvm install --lts."}},"/setup/wsl":{"title":"Wsl","data":{"":"A guide to get Windows Subsystem for Linux (WSL) up and running for web development. It will cover setting up the WSL environment, and all the tools needed.","prerequisites#Prerequisites":"This guide assumes you are on a recent build of Windows (20262+, and preferably Windows 11). The guide has been tested for Microsoft Windows Version 22H2 (OS Build 22621.963). To check your version and build number, select WIN + R, type winver, and select OK. Furthermore, if you prefer a different Linux distribution other than Ubuntu, please refer to the sources below.With Windows 11, Windows Terminal is installed by default. If you do not have Windows Terminal, please follow this guide to do so.","get-started#Get started":"Open PowerShell, and enter:\nwsl --install\nThis enables the WSL and Virtual Machine Platform components, downloads and installs the latest Linux kernel, sets WSL 2 as the default, and downloads and installs the Ubuntu Linux distribution.You will need to restart your machine to complete the installation process.","set-up-linux#Set up Linux":"After the restart a terminal window will open to setup your Linux distribution. Now you will be asked to create username and password.\nThese credentials have no bearing on your Windows username and password.\nNote that whilst entering the password, nothing will appear on screen (blind typing).\nThis will be the default user, and considered the Linux administrator, with the ability to run sudo (Super User Do) commands.\n\nTo change or reset your password find more information here.It is recommended to keep your packages up-to-date. So after we reach the login screen we update and upgrade:\nsudo apt update && sudo apt upgrade"}},"/setup/yarn":{"title":"Yarn","data":{"":"By default Node.js comes with a package manager called Node Package Manager (NPM). However, we use the Yarn package manager. To install:\nnpm install --global yarn\nCheck your installation using yarn --version."}},"/workflow/git-conventions":{"title":"Git Conventions","data":{"":"","the-main-branch#The main branch":"The main branch consists of all the code that has been squashed and merged through a pull request. The idea is that all code on main works. It is not possible to directly push code to this branch.","branch-naming#Branch naming":"We follow this branch naming structure:\n<issue_id>-<description>\n# or\nfeat/<description>\n# or\nfix/<description>\nIn Git, we can use the shorthand to checkout and create a branch:\ngit checkout -b <branch>","committing-code-to-the-repository#Committing code to the repository":"All commits must follow the Conventional Commits specification. The commit message should be structured as follows:\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\nHere, the types can be as follows: fix, feat, build, chore, ci, docs, style, refactor, perf or test. Furthermore, make sure that the commit message length does not exceed 50 characters. An example commit would look something like this:\nfeat(activity): allow user to register\n​\nThis adds the logic for activity registration and stores the ActivityRegistration to the database."}},"/workflow":{"title":"Index","data":{"":"To get familiar with the way we go from 0 to completing an issue, we've created a step-by-step guide.","1-setup#1. Setup":"First, make sure you have gone through everything under Learning and Setup.","2-checkout-the-code#2. Checkout the code":"Using the terminal navigate to the folder where you keep your repositories locally. We recommend using the following folder structure:\n~/repositories/<organisation>/<repository>\n\nIn this case the organisation would be fellenoord, and the repository is one were are about to clone from the remote. If you use the same folder structure navigating to there goes as follows: cd ~/repositories/fellenoord.\nClone the repository using git (we'll use the backend as example here). You can find this link at the repository page at GitHub.\n\n\ngit clone git@github.com:Fellenoord/fellenoord-api.git","3-setting-up-the-dependencies#3. Setting up the dependencies":"For the development at the WebCie we universally use the yarn. To get all the dependencies downloaded simply run:\nyarn install\n\n# shorthand\nyarn\nThis will create a node_modules folder with all the dependencies required to develop locally.","4-running-the-application#4. Running the application":"For all applications we provide a README.md file in which we tell you how to run the application. Make sure to read that file!","5-choosing-an-issue#5. Choosing an issue":"To keep track of work we use the GitHub projects feature. Simply pick an issue from the 'Ready for work' column on the WebCie planning project board. In the issue itself, put yourself as assignee. Then, if you're ready to make changes, move the card to the 'In progress' column.","6-making-changes#6. Making changes":"Now that we've chosen an issue we want to work on there are some essential steps.","create-a-branch#Create a branch":"To ensure code quality in all of our repositories, we work with protected branches. For each repository the main branch is the protected branch. This means that no code can be directly pushed to that branch, making sure that code is first reviewed. So when making changes we always work on a separate branch. To create a branch locally:\ngit checkout -b <name>","commit-changes#Commit changes":"After you've make some changes, we can commit those changes.\nIt is important to realise that (especially when working on larger issues) it is recommended to periodically commit your code. For two reasons: making the review of the PR easier, and allowing for rollback to a certain commit when certain changes don't work out. To see what changes you've made:\n\ngit status\nThen stage the files for commit.\n# All all files.\ngit add .\n\n# Add specific file(s).\ngit add <path-to-file-or-directory>\nFinally, we can commit the changes.\nPlease adhere to the git conventions.\n\ngit commit -m \"feat(topic): awesome description for feature\"","push-changes#Push changes":"The only thing left is to push your changes from the local git repository to the remote.\ngit push","7-review#7. Review":"","creating-a-pr#Creating a PR":"Now that you have pushed your changes to your own branch, you are ready to create a pull request (PR). To do so, head over to the repository's page on GitHub and click on the 'Pull requests' tab. Then click on the 'New pull request' button. In here, you can select the branch you want to merge into our main branch. You should also take note of the following things:\nMake sure to pick a title that is descriptive of the changes you've made\nMake sure to mention in the description which issue you are closing (i.e. Closes #<issue-number>)\nMake sure to assign yourself to the PR (can be done on the right)\n\nOnce everything is ready, you can choose to create the PR directly or as a draft. If you choose to create it as a draft, you can still make changes to the PR before it is ready to be merged. Reviewers will automatically be assigned and notified of the PR.","fixing-requested-changes#Fixing requested changes":"After a codeowner has reviewed your PR, they might request some changes. It might also be the case that certain required actions fail. In this case, you should make the requested changes and push them to the branch. Once you have made the necessary changes, do not forget to push them to the branch as well as to ask for a new review. If you do not ask for a new review, the codeowner might not be notified of the changes you've made.","reviewing-a-pr#Reviewing a PR":"While this might not be immediately relevant for everyone, it might be the case that you are asked to review a PR. When reviewing a PR, you should take the following things into account:\nDoes the PR close the issue it is supposed to close?\nDoes the PR adhere to our style conventions? (this is also partially checked by the linting action)\nAre there any changes that are not necessary for the PR? (i.e. changes to files that are not related to the issue)\nDoes the PR have a proper description ? (i.e. does it mention the issue it closes)\nDoes the PR introduce any breaking changes? (i.e. changes that might break other parts of the application)\n\nIt might be wise to test the PR locally to see if it works as intended. If you have any questions, you can always ask the author of the PR. Also make sure to use the tools provided by GitHub to make the review as clear and concise as possible, i.e. using code suggestions.","merging-code#Merging code":"This action can only be done by one of the CODEOWNERS.\nWhen the PR is finished and approved, we can merge the code to be on the main branch."}},"/learning/programming":{"title":"Programming","data":{"":"Since everyone prefers a different way to learn, we make a distinction between interactive courses, documentation and video tutorials. However, there are not always free resources available for all of these, so we have made a selection of the best free resources (in our opinion) for each of these categories.","absolute-beginner#Absolute beginner":"If you have never programmed before in your life, it might be a little difficult to get started, since JavaScript (or TypeScript) is not the easiest or most straight-forward language to learn. Nevertheless, here are some resources you can use to get started:\nJavaScript docs\nBasic JavaScript (freeCodeCamp)\nYouTube JavaScript crash course\n\nIf you feel like JavaScript is not a good starting point, you might want to consider learning a different language first. For example, Python is a very popular language for beginners, and it is also used in many data science applications. You can find a lot of resources for Python on the internet, but here are some of our favorites:\nPython Beginner's Guide\nPython for Everybody (freeCodeCamp)\n\nWhile the syntax for Python is quite different from JavaScript, the concepts are very similar. So if you learn Python first, you will have an easier time learning JavaScript later on.","have-done-some-programming-before#Have done some programming before":"Whether you have done some programming in JavaScript, Java or Python, the fundamentals are mostly the same. It is, however, important that you become familiar with the JavaScript syntax and also start grasping the fundamentals of TypeScript and Node.js. In essence, TypeScript is a superset of JavaScript, so you can use JavaScript in TypeScript, but you can also use some of the more advanced features of TypeScript. Node.js is a JavaScript runtime environment, which means that you can run JavaScript code outside of the browser. Here are some resources to help you learn both:\nJavaScript Tutorial\nIntroduction to Node.js\nTypeScript Handbook\n\nIf you have not used JavaScript before, we also recommend looking at the section above for absolute beginners to get a good foundation.Please note that Node.js setup is covered in the setup section of this guide.","have-used-typescript-before#Have used TypeScript before":"If you have used TypeScript before, chances are that you are already familiar with Node.js. If you are not, please look at the section above to familiarize yourself with Node.js. If you understand the basics of TypeScript, you should be good to get started with the next sections of this guide.","where-to-go-from-here#Where to go from here":"Now that you have a good foundation, you can start looking at the backend section or frontend section. We highly recommend that you start with the backend section, since it is the most important part of the application. If you are not interested in the backend, you can also start with the frontend section, but you will probably have to learn the backend later on anyway."}}}